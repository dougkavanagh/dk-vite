import { Context } from "~/services/gql/context";
import { MutationAddPractitionerArgs, MutationDeletePractitionerArgs, MutationUpdatePractitionerArgs, Resolvers } from "~/services/gql/gql-types"; // auto-generated by graphql-codegen script
import { SaveResult } from "../gql/gql-types";
import { PractitionerService } from "./practitioner-service";

export const resolvers: Resolvers = {
  Query: {},
  Mutation: {
    addPractitioner: async (
      parent,
      args: MutationAddPractitionerArgs,
      context: Context
    ): Promise<SaveResult> => {
      const result = await PractitionerService.create(context, args.practitioner);
      return {
        id: result._id,
      };
    },
    updatePractitioner: async (
      parent,
      args: MutationUpdatePractitionerArgs,
      context: Context
    ): Promise<SaveResult> => {
      if (!args.practitioner._id) {
        return {
          error: "Practitioner ID is required",
        }
      }
      const toUpdate = {
        ...(await PractitionerService.findById(context, args.practitioner._id)),
        ...args.practitioner
      };
      const result = await PractitionerService.save(context, toUpdate);
      return {};
    },
    deletePractitioner: async (
      parent,
      args: MutationDeletePractitionerArgs,
      context: Context
    ): Promise<SaveResult> => {
      const result = await PractitionerService.remove(context, args.id);
      return {
      };
    }
  },
};
