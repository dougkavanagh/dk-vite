import {
  MutationChangePasswordArgs,
  Resolvers,
} from "~/services/gql/gql-types"; // auto-generated by graphql-codegen script
import { Context } from "~/services/gql/context";
import {
  signup,
  findAllForAdmin,
  setAdmin,
  toSessionUser,
  sendResetPasswordEmail,
  resetPassword,
  changePassword,
  UserService,
} from "./user-service";
import { SiteService } from "../site/site-service";

export const resolvers: Resolvers = {
  Query: {
    users: async (parent, args, context) => {
      const result = await findAllForAdmin();
      return result;
    },
  },
  Mutation: {
    setAdmin: async (parent, args, context: Context) => {
      await setAdmin(args.userId, args.admin);
      if (context.user) {
        context.user.roles.admin = true;
      }
      context.setSessionUser(context.user);
      return undefined;
    },
    signup: async (parent, args, context: Context) => {
      const newUserOrError = await signup(args.user);
      if (newUserOrError.value) {
        const newUser = newUserOrError.value;
        const siteId =
          args.user.siteToJoin ??
          (await SiteService.createSiteForNewUser(newUser)).siteId;
        context.setSessionUser(toSessionUser(newUser, siteId));
      } else {
        return newUserOrError.error;
      }
    },
    resetPassword: async (parent, args, context: Context) => {
      return await resetPassword({
        ...args,
        twoFactorToken: args.twoFactorToken ?? null,
      });
    },
    changePassword: async (
      parent,
      args: MutationChangePasswordArgs,
      context: Context
    ) => {
      const params = {
        sessionUser: context.user,
        ...args,
      };
      return await changePassword(params);
    },
    sendResetPasswordEmail: async (parent, args, context: Context) => {
      const result = await sendResetPasswordEmail(args.email);
      return result.error;
    },
    setSiteAccess: async (parent, args, context: Context) => {
      const success = await UserService.setSiteAccess(
        args.userId,
        context.ensureSiteId(),
        args.access,
        args.defaultSite ?? false
      );
      return success ? undefined : { message: "User not found" };
    },
  },
};
