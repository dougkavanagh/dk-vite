import {
  Resolvers,
  SiteCredentialsListItem,
  Error,
  MutationAddCredentialsArgs,
  SiteCredentials,
} from "~/services/gql/gql-types"; // auto-generated by graphql-codegen script
import { SiteCredentialsService } from "./site-credentials-service";
import { Context } from "~/services/gql/context";
import { id } from "~/services/core/core-model";
import { decrypt, encrypt } from "~/services/core/encryption";

export const resolvers: Resolvers = {
  Query: {
    listCredentials: async (
      parent,
      args,
      context: Context
    ): Promise<SiteCredentialsListItem[]> => {
      const results =
        (await SiteCredentialsService.findBySite(context.ensureSiteId())) ?? [];
      return results.map((item) => ({
        clientId: item.clientId,
        name: item.name,
      }));
    },
  },
  Mutation: {
    addCredentials: async (
      parent,
      args: MutationAddCredentialsArgs,
      context: Context
    ): Promise<Error | undefined> => {
      await SiteCredentialsService.create({
        name: args.credentials.name,
        clientSecretEncrypted: await encrypt(id()),
        siteId: context.ensureSiteId(),
        failedAttempts: 0,
        creationUser: "creationUser",
      });
      return undefined;
    },
    removeCredentials: async (
      parent,
      args,
      context: Context
    ): Promise<Error | undefined> => {
      return (await SiteCredentialsService.remove(args.clientId))
        ? undefined
        : { message: "NOT_FOUND" };
    },
    viewCredential: async (
      parent,
      args,
      context: Context
    ): Promise<SiteCredentials | undefined> => {
      const credentials = await SiteCredentialsService.findByClientId(
        args.clientId
      );
      return credentials
        ? {
            clientId: credentials.clientId,
            clientSecret: await decrypt(credentials.clientSecretEncrypted),
            name: credentials.name,
          }
        : undefined;
    },
  },
};
