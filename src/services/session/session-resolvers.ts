import { MutationLoginArgs, Resolvers } from "~/services/gql/gql-types"; // auto-generated by graphql-codegen script
import { Context } from "~/services/gql/context";
import { checkLogin, toSessionUser } from "~/services/user/user-service";
import { signSessionUser } from "./session-service";

export const resolvers: Resolvers = {
  Query: {
    currentUser: async (parent, args, context) => {
      return context.user ?? undefined;
    },
  },
  Mutation: {
    login: async (parent, args: MutationLoginArgs, context: Context) => {
      const user = await checkLogin(args.creds.email, args.creds.password);
      if (user && user.siteIds.length > 0) {
        let siteId = args.creds.siteId ?? user.defaultSiteId ?? user.siteIds[0];
        if (!user.siteIds.includes(siteId)) {
          siteId = user.siteIds[0];
        }
        const sessionUser = toSessionUser(user, siteId);
        context.setSessionUser(sessionUser);
        return {
          success: true,
          jwt: args.creds.returnJwt ? signSessionUser(sessionUser) : undefined,
        };
      }
      return {
        success: false,
      };
    },
    logout: async (parent, args, context) => {
      context.setSessionUser(null);
      return true;
    },
  },
};
